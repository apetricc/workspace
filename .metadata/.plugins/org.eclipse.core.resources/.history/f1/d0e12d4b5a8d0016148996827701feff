package drawings2;
import csci348.drawings.*;
public class DiagonalLine extends Line{

	public DiagonalLine(int startX, int startY, int endX, int endY) {
		super(startX, startY, endX, endY);
	}
	int length = Math.abs(endX - startX);
	//@Override
	public void drawDown(SimpleDrawing palette) {
		for (int i = startX; i < endX; i++) {
			palette.showPoint(i, i);
		}
	}// drawDown
	
	public void drawUp(SimpleDrawing palette) {
		int y;
		int x;

		for (int i = startX; i < endX; i++) {
				x = i;
				y = startY - i;
				palette.showPoint(i, startY-i);
				System.out.println("X is: " + x + " and Y is: " + y);
			}
	}// drawUp
	
	public void drawAlg1(SimpleDrawing palette) {
		/*
		 * Step 1 − Get the input of two end points (X0,Y0)(X0,Y0) and (X1,Y1)(X1,Y1).

			Step 2 − Calculate the difference between two end points.
		 */
		int x = startX;
		int y = startY;
		float xIncrement;
		float yIncrement;
		int dx = endX - startX;
		int dy = endY - startY;
		int steps;
		/*
		 *Step 3 − Based on the calculated difference in step-2, you need to identify the number of steps to put pixel. If dx > dy, then you need more steps in x coordinate; otherwise in y coordinate. 
		 */
		if (dx > dy)  steps = Math.abs(dx);
		else   steps = Math.abs(dy);
		
		/*
		 * Step 4 − Calculate the increment in x coordinate and y coordinate.
		 */
	if (dy < 0 && dx > 0) {
		xIncrement = (dx / (float)steps);
		yIncrement = dy / (float)steps;
	}else {
		xIncrement = dx / (float)steps;
		yIncrement = dx / (float) steps;
	}
		/*
		 * Step 5 − Put the pixel by successfully incrementing x and y coordinates accordingly and complete the drawing of the line.
		 */
		for(int v=0; v < steps; v++)
		{
		   x += xIncrement;
		   y += yIncrement;
		   palette.showPoint(x, y);
		}
	}//drawAlg1
	
	
	
	/*
	 * function line(x0, y0, x1, y1)
     real deltax := x1 - x0
     real deltay := y1 - y0
     real error := -1.0
     real deltaerr := abs(deltay / deltax)    // Assume deltax != 0 (line is not vertical),
           // note that this division needs to be done in a way that preserves the fractional part
     int y := y0
     for x from x0 to x1-1 
         plot(x,y)
         error := error + deltaerr
         if error ≥ 0.0 then
             y := y + 1
             error := error - 1.0
	 */
	public void drawBres1(SimpleDrawing palette) {
		int x = startX;
		int y = startY;
		float xIncrement;
		float yIncrement;
		int dx = endX - startX;
		int dy = endY - startY;
		int error = -1;
		float deltaError = Math.abs(dy/dx);  //assuming dx != 0 aka line is vertical
		for (int i = x; x < endX - 1; i++) {
			palette.showPoint(i, y);
			error += deltaError;
			if (error >= 0.0) {
				y++;
				error--;
			}
		}
	}//drawBres1
	
	public void drawBres(SimpleDrawing palette) {
	    int width = endX - startX ;
	    int height = endY - startY ;
	    int x = startX;
	    int y = startY;
	    int dx1 = 0, dy1 = 0, dx2 = 0, dy2 = 0 ;
	    if (width<0) dx1 = -1 ; else if (width>0) dx1 = 1 ;
	    if (height<0) dy1 = -1 ; else if (height>0) dy1 = 1 ;
	    if (width<0) dx2 = -1 ; else if (width>0) dx2 = 1 ;
	    int longest = Math.abs(width) ;
	    int shortest = Math.abs(height) ;
	    if (!(longest>shortest)) {
	        longest = Math.abs(height) ;
	        shortest = Math.abs(width) ;
	        if (height<0) dy2 = -1 ; else if (height>0) dy2 = 1 ;
	        dx2 = 0 ;            
	    }
	    int numerator = longest >> 1 ;
	    for (int i=0;i<=longest;i++) {
	        palette.showPoint(x,y) ;
	        numerator += shortest ;
	        if (!(numerator<longest)) {
	            numerator -= longest ;
	            x += dx1 ;
	            y += dy1 ;
	        } else {
	            x += dx2 ;
	            y += dy2 ;
	        }
	    }
	}//drawBres
			
}//DiagonalLine


