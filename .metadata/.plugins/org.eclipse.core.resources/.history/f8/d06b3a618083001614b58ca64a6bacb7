package SimpleStringPackage;
import java.util.Arrays;

public class SimpleString {
	char[] contents;
	private int length;

	public SimpleString(char[] contents) {
		super();
		this.contents = Arrays.copyOf(contents, contents.length);
		this.length = contents.length;
	}
/**
 * Define a character array instance variable to hold the contents of your SimpleString.
Write a constructor that takes an array of characters as its parameter. Copy the actual argument into the above instance variable.
Methods:
	charAt(int index): returns the character at the given index.
contains(char c): returns true if the string contains the character c, false otherwise.

indexOf(char c): returns the index of the first occurrence of the character c in the string, -1 if the character does not appear in the string.

isEmpty(): returns true if the string contains no characters, false otherwise.

length(): returns the number of characters in the string.

concat(SimpleString s): returns a new SimpleString that consists of a copy of this SimpleString with a copy of s concatenated to the end.

substring(int startIndex, int endIndex): returns a new SimpleString that is a copy of the portion of this SimpleString that starts at index startIndex and ends at index endIndex - 1.

equals(Object o): returns true if this SimpleString is equal to o.

hashCode(): returns a hash code for this SimpleString.
 * @param c
 * @return
 */
	
	public int charAt(int index) {
		return this.contents[index];
	}
	
	public boolean contains(char c) {
		for (int i = 0; i < this.length; i++) {
			if (this.contents[i]==c) {
				return true;
			}
		}
		return false;
	}//contains
	
	public int indexOf(char c) {
		for (int i = 0; i < this.length; i++) {
			if (this.contents[i] == c) {
				return i;
			}
		}
		return -1;
	}//indexOf
	
	public boolean isEmpty() {
		if (this.length == 0) return true;
		return false;
	}//isEmpty
	
	
	
}